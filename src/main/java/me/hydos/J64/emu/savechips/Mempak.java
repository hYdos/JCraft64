package me.hydos.J64.emu.savechips;

import java.io.File;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.util.Arrays;

public class Mempak {

	private byte[] mempak = new byte[4 * 0x8000];
	private RandomAccessFile hMempakFile;
	private File file;

	/**
	 * Creates a new instance of mempak
	 */
	public Mempak(File file) {
		this.file = file;
	}

	public Mempak(String name) {
		this(new File(name));
	}

	// called by Main
	public void close() {
		if (hMempakFile != null) {
			try {
				hMempakFile.close();
				hMempakFile = null;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	// called by Pif
	public byte mempacksCalulateCrc(ByteBuffer data) {
		int xorTap;
		byte crc = 0;
		int dataToCrc = 0;

		for (int count = 0; count < 0x21; count++) {
			for (int length = 0x80; length >= 1; length >>= 1) {
				xorTap = ((crc & 0x80) != 0) ? 0x85 : 0;
				crc <<= 1;
				if (count == 0x20) {
					crc &= 0xFF;
				} else {
					if ((data.get(dataToCrc) & length) != 0) {
						crc |= 1;
					}
				}
				crc ^= xorTap;
			}
			dataToCrc++;
		}

		return crc;
	}

	// called by Pif
	public void readFromMempak(int control, int address, ByteBuffer buffer) {
		if (address == 0x8001) {
			Arrays.fill(buffer.array(), buffer.arrayOffset(), buffer.arrayOffset() + 0x20, (byte) 0);
			buffer.put(0x20, mempacksCalulateCrc(buffer));
			return;
		}
		address &= 0xFFE0;

		if (address <= 0x7FE0) {
			if (hMempakFile == null) {
				loadMempak();
			}
			System.arraycopy(mempak, control * 0x8000 + address, buffer.array(), buffer.arrayOffset(), 0x20);
		} else {
			Arrays.fill(buffer.array(), buffer.arrayOffset(), buffer.arrayOffset() + 0x20, (byte) 0);
			/* Rumble pack area */
		}

		buffer.put(0x20, mempacksCalulateCrc(buffer));
	}

	// called by Pif
	public void writeToMempak(int control, int address, ByteBuffer buffer) {
		if (address == 0x8001) {
			buffer.put(0x20, mempacksCalulateCrc(buffer));
			return;
		}

		address &= 0xFFE0;
		if (address <= 0x7FE0) {
			if (hMempakFile == null) {
				loadMempak();
			}
			System.arraycopy(buffer.array(), buffer.arrayOffset(), mempak, control * 0x8000 + address, 0x20);

			try {
				hMempakFile.seek(control * 0x8000);
				hMempakFile.write(mempak, control * 0x8000, 0x8000);
			} catch (Exception e) {
				e.printStackTrace();
			}
		} else {
			/* Rumble pack area */
		}
		buffer.put(0x20, mempacksCalulateCrc(buffer));
	}

	private void loadMempak() {
		int[] initilize = { 0x81, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0C, 0x0D, 0x0E,
				0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
				0xFF, 0xFF, 0xFF, 0xFF, 0x05, 0x1A, 0x5F, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
				0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0xFF, 0x66, 0x25, 0x99, 0xCD, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
				0x05, 0x1A, 0x5F, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
				0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0xFF, 0x66, 0x25, 0x99, 0xCD, 0xFF, 0xFF, 0xFF, 0xFF, 0x05, 0x1A,
				0x5F, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
				0xFF, 0xFF, 0xFF, 0x01, 0xFF, 0x66, 0x25, 0x99, 0xCD, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x05, 0x1A, 0x5F, 0x13, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x01,
				0xFF, 0x66, 0x25, 0x99, 0xCD, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x71, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03,
				0x00, 0x03, };
		for (int count = 0; count < 4; count++) {
			for (int count2 = 0; count2 < 0x8000; count2 += 2) {
				mempak[count * 0x8000 + count2] = 0x00;
				mempak[count * 0x8000 + count2 + 1] = 0x03;
			}
			for (int i = 0, m = count * 0x8000; i < initilize.length; i++, m++) {
				mempak[m] = (byte) initilize[i];
			}
		}

		try {
			hMempakFile = new RandomAccessFile(file, "rwd");
			hMempakFile.seek(0);
			hMempakFile.read(mempak, 0, mempak.length);
			hMempakFile.write(mempak, 0, mempak.length);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}
